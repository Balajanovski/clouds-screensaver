#version 440 core
layout(local_size_x = 1, local_size_y = 1) in;
layout(r8, binding = 0) uniform image2D noiseOutput;

uniform float seed;

float PHI = 1.61803398874989484820459 * 00000.1; // Golden Ratio   
float PI  = 3.14159265358979323846264 * 00000.1; // PI
float SQ2 = 1.41421356237309504880169 * 10000.0; // Square Root of Two

// Gold Noise ©2015 dcerisano@standard3d.com 
//  - based on the Golden Ratio, PI and Square Root of Two
//  - superior distribution
//  - fastest noise generator function
//  - works with all chipsets (including low precision)

float goldNoise(in vec2 coordinate) {
    return fract(tan(distance(coordinate*(seed+PHI), vec2(PHI, PI)))*SQ2);
}

// Based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
float noise (in vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    // Four corners in 2D of a tile
    float a = goldNoise(i);
    float b = goldNoise(i + vec2(1.0, 0.0));
    float c = goldNoise(i + vec2(0.0, 1.0));
    float d = goldNoise(i + vec2(1.0, 1.0));

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

#define OCTAVES 6
float fbm (in vec2 st) {
    // Initial values
    float value = 0.0;
    float amplitude = .5;
    float frequency = 0.;
    //
    // Loop of octaves
    for (int i = 0; i < OCTAVES; i++) {
        value += amplitude * noise(st);
        st *= 2.;
        amplitude *= .5;
    }
    return value;
}

void main() {
	vec3 pixelValue = vec3(0.0);
	// get x, y pos in texture
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

	vec2 resolution = vec2(gl_NumWorkGroups.x, gl_NumWorkGroups.y);
	vec2 st = pixelCoords/resolution.xy;
	st.x *= resolution.x/resolution.y;

	float f = fbm(st * 3.0);
    pixelValue = vec3(f, f, f);

	imageStore(noiseOutput, pixelCoords, vec4(pixelValue, 1.0));
}
